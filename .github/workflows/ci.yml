name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code_changed: ${{ steps.filter.outputs.code }}
      test_changed: ${{ steps.filter.outputs.test }}
      terraform_changed: ${{ steps.filter.outputs.terraform }}
      docs_changed: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            code:
              - 'src/**'
              - '**/*.go'
            test:
              - 'test/**'
            terraform:
              - '**/*.tf'
              - 'tofu/**'
            docs:
              - '**/*.md'
              - 'docs/**'

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code_changed == 'true' || needs.changes.outputs.test_changed == 'true'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-west-2
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install OpenTofu
        run: |
          curl -Lo ./tofu.deb https://github.com/opentofu/opentofu/releases/download/v1.8.2/tofu_1.8.2_amd64.deb
          sudo dpkg -i ./tofu.deb
        shell: bash

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform
        shell: bash

      - name: Run OpenTofu Tests
        id: tofu-tests
        continue-on-error: true  # Continue even if this test fails
        run: |
          export TERRATEST_TERRAFORM_EXECUTABLE=tofu
          cd test
          go test -v ./...
        shell: bash

      - name: Run Terraform Tests
        id: terraform-tests
        continue-on-error: true  # Continue even if this test fails
        run: |
          export TERRATEST_TERRAFORM_EXECUTABLE=terraform
          cd test
          go test -v ./...
        shell: bash

      - name: Determine Final Status
        if: always()  # Always run this step
        run: |
          # Check if either test passed
          if [[ "${{ steps.tofu-tests.outcome }}" == "success" || "${{ steps.terraform-tests.outcome }}" == "success" ]]; then
            echo "At least one test suite passed."
            exit 0  # Exit with success
          else
            echo "Both test suites failed."
            exit 1  # Exit with failure
          fi  # Ensure fi closes the if block
        shell: bash

  security:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.terraform_changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: ./tofu

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ./tofu
          additional_args: '--config-file=../.tfsec.yml --soft-fail'

  lint:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - uses: actions/checkout@v4

      - name: Run golangci-lint
        if: needs.changes.outputs.code_changed == 'true'
        uses: golangci/golangci-lint-action@v3
        with:
          working-directory: test

      - name: Run markdown lint
        if: needs.changes.outputs.docs_changed == 'true'
        uses: avto-dev/markdown-lint@v1
        with:
          config: '.markdownlint.json'
          args: '**/*.md'

  deploy-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [test, security, lint, changes]
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.docs_changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install mkdocs

      - name: Build and deploy documentation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          mkdocs gh-deploy --force
